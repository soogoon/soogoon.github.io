<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>팬케이크형 인간</title>
    <link>http://soogoon.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 23 May 2019 11:35:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>좋은 깃 로그를 위한 커밋 메시지 규칙</title>
      <link>http://soogoon.github.io/2019/05/23/git-commit-message-style-guide/</link>
      <guid>http://soogoon.github.io/2019/05/23/git-commit-message-style-guide/</guid>
      <pubDate>Thu, 23 May 2019 10:15:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;개발자라면 누구나 Git을 사용합니다. 개발자를 지망하는 분들에게도 실력을 떠나 자신의 개발 자취를 남기는 데에는 깃 만한 것이 없죠. 깃을 쓰게 되면 기본적으로 커밋부터 시작하게 됩니다. 커밋과 함께 필수적으로 따라오는 요소가 바로 커밋 메시지
        
      
      </description>
      
      <content:encoded><![CDATA[<p>개발자라면 누구나 Git을 사용합니다. 개발자를 지망하는 분들에게도 실력을 떠나 자신의 개발 자취를 남기는 데에는 깃 만한 것이 없죠. 깃을 쓰게 되면 기본적으로 커밋부터 시작하게 됩니다. 커밋과 함께 필수적으로 따라오는 요소가 바로 커밋 메시지입니다. 커밋 메시지는 모든 내용이 깃 로그에 남기 때문에 잘 쓰이는 것이 중요합니다.</p><p>그 이유를 들어보면 다음과 같습니다.</p><ul><li>이해하기 쉬운 커밋 로그 가독성</li><li>더 나은 협업과 리뷰 프로세스</li><li>쉬운 코드 유지보수</li></ul><p>그래서 좋은 커밋 메시지란 무엇인지 아래 참고를 바탕으로 작성해 보았습니다.</p><blockquote><p>참고</p><ul><li><a href="https://meetup.toast.com/posts/106" target="_blank" rel="noopener">https://meetup.toast.com/posts/106</a></li><li><a href="https://udacity.github.io/git-styleguide/" target="_blank" rel="noopener">https://udacity.github.io/git-styleguide/</a></li></ul></blockquote><h1>Message Structure</h1><p>기본적으로 제목(subject), 본문(body), 꼬리말(footer)로 구성되며, 메세지의 type으로 어떤 커밋인지 쉽게 구별한다.</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">type: subject</span><br><span class="line"></span><br><span class="line">body</span><br><span class="line"></span><br><span class="line">footer</span><br></pre></td></tr></table></figure><h2>Type (커밋 타입)</h2><ul><li><strong>feat:</strong> a new feature - 새로운 피쳐 추가</li><li><strong>fix:</strong> a bug fix - 버그 해결</li><li><strong>docs:</strong> changes to documentation - 프로젝트 관련 문서 수정</li><li><strong>style:</strong> formatting, missing semi colons, etc; no code change - 코드 포맷 변경, 세미 콜론 누락, 코드 수정이 없는 경우</li><li><strong>refactor:</strong> refactoring production code - 프로덕션 코드 리팩토링</li><li><strong>test:</strong> adding tests, refactoring test; no production code change - 테스트 추가, 리팩토링 (프로덕션 코드 변경 없음)</li><li><strong>chore:</strong> updating build tasks, package manager configs, etc; no production code change - 빌드 테스크 업데이트, 패키지 매니저 설정 (프로덕션 코드 변경 없음)</li></ul><h2>Subject (제목)</h2><ul><li>제목과 본문을 한 줄을 띄워 분리</li><li>영문 기준 50자를 넘기지 말 것</li><li>첫 글자는 대문자로 시작</li><li>끝에 . (마침표) 금지</li><li>명령조로 작성</li></ul><h2>Body (본문)</h2><ul><li>선택 사항이므로 모든 커밋에 꼭 작성할 필요는 없음</li><li>어떻게 보다 무엇을, 왜 에 초점을 맞춰 작성할 것</li><li>영문 기준 72자마다 줄 바꿈</li></ul><h2>Footer (꼬리말)</h2><ul><li>선택 사항</li><li>Issue tracking ID 를 작성할 때 사용</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Resolves: #123</span><br><span class="line">See also: #456, #789</span><br></pre></td></tr></table></figure><h1>Message Example</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">feat: Summarize changes in around 50 characters or less</span><br><span class="line"></span><br><span class="line">More detailed explanatory text, if necessary. Wrap it to about 72</span><br><span class="line">characters or so. In some contexts, the first line is treated as the</span><br><span class="line">subject of the commit and the rest of the text as the body. The</span><br><span class="line">blank line separating the summary from the body is critical (unless</span><br><span class="line">you omit the body entirely); various tools like <span class="code">`log`</span>, <span class="code">`shortlog`</span></span><br><span class="line">and <span class="code">`rebase`</span> can get confused if you run the two together.</span><br><span class="line"></span><br><span class="line">Explain the problem that this commit is solving. Focus on why you</span><br><span class="line">are making this change as opposed to how (the code explains that).</span><br><span class="line">Are there side effects or other unintuitive consequenses of this</span><br><span class="line">change? Here's the place to explain them.</span><br><span class="line"></span><br><span class="line">Further paragraphs come after blank lines.</span><br><span class="line"></span><br><span class="line">  - Bullet points are okay, too</span><br><span class="line"></span><br><span class="line">  - Typically a hyphen or asterisk is used for the bullet, preceded</span><br><span class="line"><span class="code">    by a single space, with blank lines in between, but conventions</span></span><br><span class="line"><span class="code">    vary here</span></span><br><span class="line"></span><br><span class="line">If you use an issue tracker, put references to them at the bottom,</span><br><span class="line">like this:</span><br><span class="line"></span><br><span class="line">Resolves: #123</span><br><span class="line">See also: #456, #789</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://soogoon.github.io/2019/05/23/git-commit-message-style-guide/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://soogoon.github.io/2019/03/31/hello-world/</link>
      <guid>http://soogoon.github.io/2019/03/31/hello-world/</guid>
      <pubDate>Sun, 31 Mar 2019 06:55:23 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2>Quick Start</h2><h3>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://soogoon.github.io/2019/03/31/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
